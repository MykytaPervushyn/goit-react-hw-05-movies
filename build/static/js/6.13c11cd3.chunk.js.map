{"version":3,"sources":["services/movies-api.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","views/Movies.js"],"names":["BASE_URL","API_KEY","fetchMovies","fetch","then","response","ok","json","Promise","reject","Error","fetchMovieById","movieId","fetchCast","fetchReview","fetchQuery","query","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","PageHeading","lazy","Movies","navigate","useNavigate","location","useLocation","useState","searchedMovies","setSearchedMovies","setQuery","console","log","search","q","URLSearchParams","get","useEffect","moviesAPI","movie","results","reset","text","onSubmit","e","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","onChange","toLowerCase","map","original_title","to","id","state","from","label"],"mappings":"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","file":"static/js/6.13c11cd3.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '52d240069c1d754f89fa7da7b1692ef8';\r\n\r\n// async function fetchWithErrorHandling(url = '', config = {}) {\r\n//   const response = await fetch(url, config);\r\n//   return response.ok\r\n//     ? await response.json()\r\n//     : Promise.reject(new Error('Not found'));\r\n// }\r\n\r\n// export function fetchCast(movieId) {\r\n//   return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\r\n// }\r\n\r\n// export function fetchMovies() {\r\n//   return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\r\n// }\r\n\r\n// export function fetchMovieById(movieId) {\r\n//   return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\r\n// }\r\n// console.log(fetchCast())\r\n\r\n\r\nexport function fetchMovies() {\r\n  return fetch(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`).then(\r\n    (response) => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      return Promise.reject(new Error(`no movies today`));\r\n    }\r\n  );\r\n}\r\nexport function fetchMovieById(movieId) {\r\n  return fetch(\r\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`no movies today`));\r\n  });\r\n}\r\n\r\nexport function fetchCast(movieId) {\r\n  return fetch(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`no movies today`));\r\n  });\r\n}\r\n\r\nexport function fetchReview(movieId) {\r\n  return fetch(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`no movies today`));\r\n  });\r\n}\r\n\r\nexport function fetchQuery(query) {\r\n  return fetch(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    // return Promise.reject(new Error(`no movies with ${query} name`));\r\n  });\r\n}\r\n\r\n// function fatchMovieReview(movieId) {\r\n//   return fetch(\r\n//     `${BASE_URL}/movie/${movieId}/reviews?api_key=${key}&language=en-US&page=1`\r\n//   ).then((response) => {\r\n//     if (response.ok) {\r\n//       return response.json();\r\n//     }\r\n//     return Promise.reject(new Error(`no reviews for this movie`));\r\n//   });\r\n// }\r\n\r\n// function fatchMovieSearch(movieName) {\r\n//   return fetch(\r\n//     `${BASE_URL}/search/movie?api_key=${key}&language=en-US&query=${movieName}&page=1&include_adult=false`\r\n//   ).then((response) => {\r\n//     if (response.ok) {\r\n//       return response.json();\r\n//     }\r\n//     return Promise.reject(new Error(`no movies with name ${movieName}`));\r\n//   });\r\n// }\r\n\r\n// const api = {\r\n//   fetchMovies,\r\n//   fetchMovieById,\r\n//   fetchCast,\r\n//   // fatchMovieReview,\r\n//   // fatchMovieSearch,\r\n// };\r\n// export default api;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { useState, useEffect, lazy } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport * as moviesAPI from '../services/movies-api';\r\n// import PageHeading from '../components/PageHeading/PageHeading';\r\n// import MovieDetailsView from '../views/MovieDetailView';\r\n\r\nconst PageHeading = lazy(() => import('../components/PageHeading/PageHeading'))\r\n\r\nexport default function Movies() {\r\n  //   const { url } = useRouteMatch();\r\n  // const history = useHistory;\r\n  // const location = useLocation;\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [searchedMovies, setSearchedMovies] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n  // const [searchParams, setSearchParams] = useSearchParams();\r\n  // const search = searchParams.get('search');\r\n\r\n  console.log(location.search)\r\n  const q = new URLSearchParams(location.search).get('q');\r\n  console.log(q)\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      moviesAPI.fetchQuery(query).then((movie) => {\r\n        setSearchedMovies(movie.results);\r\n      })\r\n    }\r\n  }, [q]);\r\n  console.log(searchedMovies)\r\n\r\n  const handleQueryChange = e => {\r\n    setQuery(e.target.value.toLowerCase())\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (query.trim() === '') {\r\n      alert('Please enter search query');\r\n      return;\r\n    }\r\n\r\n    // if (!query.trim()) return setQuery('');\r\n\r\n    moviesAPI.fetchQuery(query).then((movie) => {\r\n      setSearchedMovies(movie.results);\r\n      // setSearchParams(search)\r\n    });\r\n    // navigate(\"/movies/movie\");\r\n    navigate({\r\n      ...location,\r\n      search: `q=${query}`\r\n    });\r\n    console.log(location)\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setQuery('');\r\n  };\r\n  console.log(moviesAPI.fetchQuery(query))\r\n\r\n  return (\r\n    <>\r\n      <PageHeading text=\"Movies\" />\r\n\r\n      {/* {movies && ( */}\r\n      <form onSubmit={handleSubmit}>\r\n        <button type=\"submit\">\r\n          {/* <ImSearch />\r\n                      <span className={s.buttonLabel}>Search</span> */}\r\n        </button>\r\n        <input\r\n          // className={s.input}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={query}\r\n          onChange={handleQueryChange}\r\n        />\r\n      </form>\r\n      {/* )} */}\r\n\r\n      <ul>\r\n        {searchedMovies.map(movie => (\r\n          <li key={movie.id}>\r\n            {movie.original_title}\r\n            <Link\r\n              to={`/movies/${movie.id}`}\r\n              state={{ from: location, label: 'Go to Search' }}\r\n            >\r\n              {movie.original_title}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}"],"sourceRoot":""}