{"version":3,"sources":["services/movies-api.js","components/PageHeading/PageHeading.js","components/PageHeading/PageHeading.module.css","components/MovieCast.js","components/Reviews/Reviews.js","views/MovieDetailView.js"],"names":["BASE_URL","API_KEY","fetchMovies","fetch","then","response","ok","json","Promise","reject","Error","fetchMovieById","movieId","fetchCast","fetchReview","fetchQuery","query","PageHeading","text","className","s","title","module","exports","AuthorsView","useState","movieCast","setMovieCast","useParams","useEffect","moviesAPI","cast","console","log","map","actor","src","profile_path","alt","character","name","Reviews","reviews","setReviews","data","results","length","review","author","content","id","MovieDetailsView","movie","setMovie","params","poster_path","original_title","overview","genres","join","to","path","element"],"mappings":"2IAAA,8KAAMA,EAAW,+BACXC,EAAU,mCAuBT,SAASC,IACd,OAAOC,MAAM,GAAD,OAAIH,EAAJ,uCAA2CC,IAAWG,MAChE,SAACC,GACC,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,uBAIrB,SAASC,EAAeC,GAC7B,OAAOT,MAAM,GAAD,OACPH,EADO,kBACWY,EADX,oBAC8BX,EAD9B,oBAEVG,MAAK,SAACC,GACN,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,uBAInB,SAASG,EAAUD,GACxB,OAAOT,MAAM,GAAD,OACPH,EADO,kBACWY,EADX,4BACsCX,EADtC,oBAEVG,MAAK,SAACC,GACN,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,uBAInB,SAASI,EAAYF,GAC1B,OAAOT,MAAM,GAAD,OACPH,EADO,kBACWY,EADX,4BACsCX,EADtC,oBAEVG,MAAK,SAACC,GACN,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,uBAInB,SAASK,EAAWC,GACzB,OAAOb,MAAM,GAAD,OACPH,EADO,iCAC0BC,EAD1B,iCAC0De,EAD1D,yBAEVZ,MAAK,SAACC,GACN,GAAIA,EAASC,GACX,OAAOD,EAASE,Y,gCCxEtB,2EAEe,SAASU,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,oBAAIC,UAAWC,IAAEC,MAAjB,SAAyBH,M,mBCFlCI,EAAOC,QAAU,CAAC,MAAQ,6B,sICMX,SAASC,IAEpB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACQf,EAAYgB,cAAZhB,QAUV,OARAiB,qBAAU,WACRC,IAAoBlB,GAASR,MAAK,SAACsB,GACjCC,EAAaD,EAAUK,WAExB,CAACnB,IACFoB,QAAQC,IAAIH,IAAoBlB,IAChCoB,QAAQC,IAAIP,GAGZ,qCACE,cAACT,EAAA,QAAD,CAAaC,KAAK,yCAEjBQ,GACC,6BACGA,EAAUQ,KAAI,SAAAC,GAAK,OAClB,+BACA,qBACEC,IAAG,yCAAoCD,EAAME,cAC7CC,IAAKH,EAAMI,YAEb,4CAAaJ,EAAMK,QACnB,iDAAkBL,EAAMI,qBAK9B,0BCjCS,SAASE,IAEtB,MAA8BhB,mBAAS,IAAvC,mBAAOiB,EAAP,KAAgBC,EAAhB,KAEU/B,EAAYgB,cAAZhB,QAUR,OAPFiB,qBAAU,WACNC,IAAsBlB,GAASR,MAAK,SAACwC,GACjCD,EAAWC,EAAKC,cAErB,CAACjC,IACFoB,QAAQC,IAAIH,IAAsBlB,IAEX,IAAnB8B,EAAQI,OACL,0EAIP,qCACE,cAAC7B,EAAA,QAAD,CAAaC,KAAK,YAEjBwB,GACC,6BACGA,EAAQR,KAAI,SAAAa,GAAM,OACjB,+BACM,0CAAaA,EAAOC,UACpB,4BAAID,EAAOE,YAFRF,EAAOG,YCvBb,SAASC,IACtB,IAAQvC,EAAYgB,cAAZhB,QACR,EAA0Ba,mBAAS,MAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KACQC,EAAS1B,cAOjB,OANEI,QAAQC,IAAIqB,GAEdzB,qBAAU,WACRC,IAAyBlB,GAASR,KAAKiD,KACtC,CAACzC,IAGF,qCACE,cAACK,EAAA,QAAD,CAAaC,KAAI,eAAUN,KAE1BwC,GACC,qCACE,qBAAKhB,IAAG,0CAAqCgB,EAAMG,aAAejB,IAAKc,EAAMI,iBAC7E,6BAAKJ,EAAMI,iBACX,4BAAIJ,EAAMK,WACV,yCAAYL,EAAMM,OAAOxB,KAAI,qBAAGM,QAAiBmB,KAAK,SACtD,cAAC,IAAD,CACEC,GAAE,kBAAahD,EAAb,SADJ,kBAIA,cAAC,IAAD,CACEgD,GAAE,kBAAahD,EAAb,YADJ,qBAIA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiD,KAAK,QAAQC,QAAS,cAAC,EAAD,MAC7B,cAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,cAACrB,EAAD","file":"static/js/4.1a9b1e34.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '52d240069c1d754f89fa7da7b1692ef8';\r\n\r\n// async function fetchWithErrorHandling(url = '', config = {}) {\r\n//   const response = await fetch(url, config);\r\n//   return response.ok\r\n//     ? await response.json()\r\n//     : Promise.reject(new Error('Not found'));\r\n// }\r\n\r\n// export function fetchCast(movieId) {\r\n//   return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\r\n// }\r\n\r\n// export function fetchMovies() {\r\n//   return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\r\n// }\r\n\r\n// export function fetchMovieById(movieId) {\r\n//   return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\r\n// }\r\n// console.log(fetchCast())\r\n\r\n\r\nexport function fetchMovies() {\r\n  return fetch(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`).then(\r\n    (response) => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      return Promise.reject(new Error(`no movies today`));\r\n    }\r\n  );\r\n}\r\nexport function fetchMovieById(movieId) {\r\n  return fetch(\r\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`no movies today`));\r\n  });\r\n}\r\n\r\nexport function fetchCast(movieId) {\r\n  return fetch(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`no movies today`));\r\n  });\r\n}\r\n\r\nexport function fetchReview(movieId) {\r\n  return fetch(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(`no movies today`));\r\n  });\r\n}\r\n\r\nexport function fetchQuery(query) {\r\n  return fetch(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`\r\n  ).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    // return Promise.reject(new Error(`no movies with ${query} name`));\r\n  });\r\n}\r\n\r\n// function fatchMovieReview(movieId) {\r\n//   return fetch(\r\n//     `${BASE_URL}/movie/${movieId}/reviews?api_key=${key}&language=en-US&page=1`\r\n//   ).then((response) => {\r\n//     if (response.ok) {\r\n//       return response.json();\r\n//     }\r\n//     return Promise.reject(new Error(`no reviews for this movie`));\r\n//   });\r\n// }\r\n\r\n// function fatchMovieSearch(movieName) {\r\n//   return fetch(\r\n//     `${BASE_URL}/search/movie?api_key=${key}&language=en-US&query=${movieName}&page=1&include_adult=false`\r\n//   ).then((response) => {\r\n//     if (response.ok) {\r\n//       return response.json();\r\n//     }\r\n//     return Promise.reject(new Error(`no movies with name ${movieName}`));\r\n//   });\r\n// }\r\n\r\n// const api = {\r\n//   fetchMovies,\r\n//   fetchMovieById,\r\n//   fetchCast,\r\n//   // fatchMovieReview,\r\n//   // fatchMovieSearch,\r\n// };\r\n// export default api;","import s from './PageHeading.module.css';\r\n\r\nexport default function PageHeading({ text }) {\r\n  return <h1 className={s.title}>{text}</h1>;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageHeading_title__S34YD\"};","import { useState, useEffect } from 'react';\r\nimport { NavLink, Route, useRouteMatch } from 'react-router-dom';\r\nimport * as moviesAPI from '../services/movies-api';\r\nimport PageHeading from '../components/PageHeading/PageHeading';\r\n// import AuthorSubView from './AuthorSubView';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function AuthorsView() {\r\n//   const { url, path } = useRouteMatch();\r\n    const [movieCast, setMovieCast] = useState([]);\r\n    const { movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    moviesAPI.fetchCast(movieId).then((movieCast) => {\r\n      setMovieCast(movieCast.cast);\r\n    });\r\n  }, [movieId]);\r\n    console.log(moviesAPI.fetchCast(movieId))\r\n    console.log(movieCast)\r\n\r\n  return (\r\n    <>\r\n      <PageHeading text=\"Авторы\" />\r\n\r\n      {movieCast && (\r\n        <ul>\r\n          {movieCast.map(actor => (\r\n            <li>\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\r\n              alt={actor.character}\r\n            ></img>\r\n            <p>{`Name: ${actor.name}`}</p>\r\n            <p>{`Character: ${actor.character}`}</p>\r\n          </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <hr />\r\n\r\n      {/* <Route path={`${path}/:authorId`}>\r\n        {authors && <AuthorSubView authors={authors} />}\r\n      </Route> */}\r\n    </>\r\n  );\r\n}","import { useState, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport * as moviesAPI from '../../services/movies-api';\r\nimport PageHeading from '../../components/PageHeading/PageHeading';\r\n\r\nexport default function Reviews() {\r\n//   const { url } = useRouteMatch();\r\n  const [reviews, setReviews] = useState([]);\r\n    // const [status, setStatus] = useState('idle');\r\n    const { movieId } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n      moviesAPI.fetchReview(movieId).then((data) => {\r\n          setReviews(data.results)\r\n      });\r\n  }, [movieId]);\r\n    console.log(moviesAPI.fetchReview(movieId))\r\n\r\n    if (reviews.length === 0) {\r\n    return <p>We don't have any reviews for this movie.</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeading text=\"Reviews\" />\r\n\r\n      {reviews && (\r\n        <ul>\r\n          {reviews.map(review => (\r\n            <li key={review.id}>\r\n                  <h3>Author: {review.author}</h3>\r\n                  <p>{review.content}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}","import { useState, useEffect, Suspense } from 'react';\r\nimport { useParams, Link, Route, Routes } from 'react-router-dom';\r\nimport PageHeading from '../components/PageHeading/PageHeading';\r\nimport * as moviesAPI from '../services/movies-api';\r\nimport MovieCast from \"../components/MovieCast\";\r\nimport Reviews from \"../components/Reviews/Reviews\";\r\n\r\nexport default function MovieDetailsView() {\r\n  const { movieId } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n    const params = useParams();\r\n    console.log(params)\r\n\r\n  useEffect(() => {\r\n    moviesAPI.fetchMovieById(movieId).then(setMovie);\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      <PageHeading text={`Film ${movieId}`} />\r\n\r\n      {movie && (\r\n        <>\r\n          <img src={`https://image.tmdb.org/t/p/w342/${movie.poster_path}`} alt={movie.original_title} />\r\n          <h2>{movie.original_title}</h2>\r\n          <p>{movie.overview}</p>\r\n          <p>Genres: {movie.genres.map(({ name }) => name).join(', ')}</p>\r\n          <Link\r\n            to={`/movies/${movieId}/cast`}>\r\n            Cast\r\n          </Link>\r\n          <Link\r\n            to={`/movies/${movieId}/reviews`}>\r\n            Reviews\r\n          </Link>\r\n          <Routes>\r\n            <Route path=\"/cast\" element={<MovieCast />} />\r\n            <Route path=\"/reviews\" element={<Reviews />} />\r\n            </Routes>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}"],"sourceRoot":""}